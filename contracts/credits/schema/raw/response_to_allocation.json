{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Allocation",
  "type": "object",
  "required": [
    "allocated_amount",
    "schedule",
    "withdrawn_amount"
  ],
  "properties": {
    "allocated_amount": {
      "description": "Total allocated amount that can be withdrawn",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "schedule": {
      "description": "Vesting schedule settings for this allocation",
      "allOf": [
        {
          "$ref": "#/definitions/Schedule"
        }
      ]
    },
    "withdrawn_amount": {
      "description": "Amount that has already been withdrawn from account (Does not include reward withdraws)",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    }
  },
  "definitions": {
    "Schedule": {
      "type": "object",
      "required": [
        "cliff",
        "duration",
        "start_time"
      ],
      "properties": {
        "cliff": {
          "description": "Specified in seconds. Tokens start to get unlocked at `start_time + cliff` time.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "duration": {
          "description": "Duration of the vesting/unlocking process. At time `start_time + duration`, 100% of the tokens are vested/unlocked in full.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "start_time": {
          "description": "Timestamp in UNIX seconds when vesting/unlocking starts",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
