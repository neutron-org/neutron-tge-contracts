{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Claim does not check if contract has enough funds, owner must ensure it.",
      "type": "object",
      "required": [
        "claim"
      ],
      "properties": {
        "claim": {
          "type": "object",
          "required": [
            "amount",
            "proof"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "proof": {
              "description": "Proof is hex-encoded merkle proof.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "sig_info": {
              "description": "Enables cross chain airdrops. Target wallet proves identity by sending a signed [SignedClaimMsg](SignedClaimMsg) containing the recipient address.",
              "anyOf": [
                {
                  "$ref": "#/definitions/SignatureInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Permissionless, activated after vesting is over (consult to `[InstantiateMsg]` documentation for more info). Withdraws all remaining cNTRN tokens, burns them, receiving NTRN in exchange, and sends all received NTRN's to reserve.",
      "type": "object",
      "required": [
        "withdraw_all"
      ],
      "properties": {
        "withdraw_all": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pause"
      ],
      "properties": {
        "pause": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "resume"
      ],
      "properties": {
        "resume": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "SignatureInfo": {
      "type": "object",
      "required": [
        "claim_msg",
        "signature"
      ],
      "properties": {
        "claim_msg": {
          "$ref": "#/definitions/Binary"
        },
        "signature": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
