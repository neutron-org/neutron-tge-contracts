{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "airdrop_start",
    "cosmos_hub_treasury",
    "credits_address",
    "merkle_root",
    "vesting_duration_seconds",
    "vesting_start"
  ],
  "properties": {
    "airdrop_start": {
      "description": "A point in time from which it is possible to claim airdrops",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "cosmos_hub_treasury": {
      "type": "string"
    },
    "credits_address": {
      "type": "string"
    },
    "hrp": {
      "description": "hrp is the bech32 parameter required for building external network address from signature message during claim action. example \"cosmos\", \"terra\", \"juno\"",
      "type": [
        "string",
        "null"
      ]
    },
    "merkle_root": {
      "description": "MerkleRoot is hex-encoded merkle root.",
      "type": "string"
    },
    "total_amount": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    },
    "transfer_channel": {
      "description": "transfer_channel is an ibc channel used to transfer unclaimed airdrops to cosmos treasury",
      "type": [
        "string",
        "null"
      ]
    },
    "vesting_duration_seconds": {
      "description": "Total duration of vesting. At `vesting_start.seconds() + vesting_duration_seconds` point of time it is no longer possible to claim airdrops. At the very same point of time, it is possible to withdraw all remaining cNTRNs, exchange them for NTRNs and send to reserve, using `[ExecuteMsg::WithdrawAll]` message",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "vesting_start": {
      "description": "A point in time from which a vesting is configured for cNTRNs. At this point, it is still possible for users to claim their airdrops.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
