{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "request"
      ],
      "properties": {
        "request": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "new_config"
          ],
          "properties": {
            "new_config": {
              "$ref": "#/definitions/UpdateConfigMsg"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_owner"
      ],
      "properties": {
        "update_owner": {
          "type": "object",
          "required": [
            "new_owner"
          ],
          "properties": {
            "new_owner": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "UpdateConfigMsg": {
      "type": "object",
      "properties": {
        "ask_count": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint64"
            },
            {
              "type": "null"
            }
          ]
        },
        "client_id": {
          "type": [
            "string",
            "null"
          ]
        },
        "execute_gas": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint64"
            },
            {
              "type": "null"
            }
          ]
        },
        "fee_limit": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "max_update_interval": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "min_count": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint64"
            },
            {
              "type": "null"
            }
          ]
        },
        "multiplier": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint64"
            },
            {
              "type": "null"
            }
          ]
        },
        "oracle_script_id": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint64"
            },
            {
              "type": "null"
            }
          ]
        },
        "prepare_gas": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint64"
            },
            {
              "type": "null"
            }
          ]
        },
        "symbols": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
