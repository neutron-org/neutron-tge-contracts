{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "owner"
          ],
          "properties": {
            "expires_in": {
              "description": "The validity period of the offer to change the owner",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "description": "The newly proposed owner",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Removes a request to change contract ownership ## Executor Only the current owner can execute this",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claims contract ownership ## Executor Only the newly proposed owner can execute this",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Sets vesting token ## Executor Only the current owner or token info manager can execute this",
      "type": "object",
      "required": [
        "set_vesting_token"
      ],
      "properties": {
        "set_vesting_token": {
          "type": "object",
          "required": [
            "vesting_token"
          ],
          "properties": {
            "vesting_token": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Contains messages associated with the managed extension for vesting contracts.",
      "type": "object",
      "required": [
        "managed_extension"
      ],
      "properties": {
        "managed_extension": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/ExecuteMsgManaged"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Contains messages associated with the with_managers extension for vesting contracts.",
      "type": "object",
      "required": [
        "with_managers_extension"
      ],
      "properties": {
        "with_managers_extension": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/ExecuteMsgWithManagers"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Contains messages associated with the historical extension for vesting contracts.",
      "type": "object",
      "required": [
        "historical_extension"
      ],
      "properties": {
        "historical_extension": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/ExecuteMsgHistorical"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "A handler to receive lockdrop liquidity migrated from xyl pools to PCL ones. Only callable by the original lockdrop contract. Expects two **Coin**s to be attached as funds.",
      "type": "object",
      "required": [
        "migrate_xyk_liquidity"
      ],
      "properties": {
        "migrate_xyk_liquidity": {
          "type": "object",
          "required": [
            "duration",
            "lockup_info",
            "pool_type",
            "user_address_raw",
            "user_info"
          ],
          "properties": {
            "duration": {
              "description": "The duration of the lock period.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lockup_info": {
              "description": "The lockup info from the XYK lockdrop contract. Is used to create a LockupInfoV2 entry on the PCL lockdrop contract's side.",
              "allOf": [
                {
                  "$ref": "#/definitions/LockupInfoV2"
                }
              ]
            },
            "pool_type": {
              "description": "The type of the pool the lockup is related to.",
              "allOf": [
                {
                  "$ref": "#/definitions/PoolType2"
                }
              ]
            },
            "user_address_raw": {
              "description": "The address of the user which owns the lockup.",
              "type": "string"
            },
            "user_info": {
              "description": "The lockup owner's info from the XYK lockdrop contract. Is used to create a UserInfo entry on the PCL lockdrop contract's side.",
              "allOf": [
                {
                  "$ref": "#/definitions/UserInfo"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ExecuteMsgHistorical": {
      "description": "This structure describes the execute messages available in a historical vesting contract.",
      "type": "string",
      "enum": []
    },
    "ExecuteMsgManaged": {
      "description": "This structure describes the execute messages available in a managed vesting contract.",
    "CallbackMsg": {
      "oneOf": [
        {
          "description": "Removes vesting targets/accounts. ## Executor Only the current owner can execute this",
          "type": "object",
          "required": [
            "remove_vesting_accounts"
          ],
          "properties": {
            "remove_vesting_accounts": {
              "type": "object",
              "required": [
                "clawback_account",
                "vesting_accounts"
              ],
              "properties": {
                "clawback_account": {
                  "description": "Specifies the account that will receive the funds taken from the vesting accounts.",
                  "type": "string"
                },
                "vesting_accounts": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ExecuteMsgWithManagers": {
      "description": "This structure describes the execute messages available in a with_managers vesting contract.",
      "oneOf": [
        {
          "description": "Adds vesting managers ## Executor Only the current owner can execute this",
          "type": "object",
          "required": [
            "add_vesting_managers"
          ],
          "properties": {
            "add_vesting_managers": {
              "type": "object",
              "required": [
                "managers"
              ],
              "properties": {
                "duration": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "pool_type": {
                  "$ref": "#/definitions/PoolType"
                },
                "user_address": {
                  "$ref": "#/definitions/Addr"
                },
                "withdraw_lp_stake": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Completes the liquidity migration process by making all necessary state updates for the lockup position.",
          "type": "object",
          "required": [
            "finish_lockup_migration_callback"
          ],
          "properties": {
            "finish_lockup_migration_callback": {
              "type": "object",
              "required": [
                "duration",
                "lockup_info",
                "lp_token",
                "pool_type",
                "staked_lp_token_amount",
                "user_address",
                "user_info"
              ],
              "properties": {
                "duration": {
                  "description": "The duration of the lock period.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "lockup_info": {
                  "description": "The lockup info from the XYK lockdrop contract. Is used to create a LockupInfoV2 entry on the PCL lockdrop contract's side.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/LockupInfoV2"
                    }
                  ]
                },
                "lp_token": {
                  "description": "The address of the LP token of the pool.",
                  "type": "string"
                },
                "pool_type": {
                  "description": "The type of the pool the lockup is related to.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolType"
                    }
                  ]
                },
                "staked_lp_token_amount": {
                  "description": "The amount of staked LP token the PCL lockdrop contract possesses of before liquidity provision and staking to the incentives. Used to calculate LP token amount received for liquidity provision.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                },
                "user_address": {
                  "description": "The address of the user which owns the lockup.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "user_info": {
                  "description": "The lockup owner's info from the XYK lockdrop contract. Is used to create a UserInfo entry on the PCL lockdrop contract's side.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/UserInfo"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LockupInfoV2": {
      "type": "object",
      "required": [
        "generator_ntrn_debt",
        "generator_proxy_debt",
        "lp_units_locked",
        "ntrn_rewards",
        "unlock_timestamp",
        "withdrawal_flag"
      ],
      "properties": {
        "astroport_lp_transferred": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "generator_ntrn_debt": {
          "description": "Generator NTRN tokens loockup received as generator rewards",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "generator_proxy_debt": {
          "description": "Generator Proxy tokens lockup received as generator rewards",
          "allOf": [
            {
              "$ref": "#/definitions/RestrictedVector_for_AssetInfo_and_Uint128"
            }
          ]
        },
        "lp_units_locked": {
          "description": "Terraswap LP units locked by the user",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "ntrn_rewards": {
          "description": "NTRN tokens received as rewards for participation in the lockdrop",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "unlock_timestamp": {
          "description": "Timestamp beyond which this position can be unlocked",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "withdrawal_flag": {
          "description": "Boolean value indicating if the user's has withdrawn funds post the only 1 withdrawal limit cutoff",
          "type": "boolean"
        }
      }
    },
    "PoolType": {
      "type": "string",
      "enum": [
        "USDC",
        "ATOM"
      ]
    },
    "PoolType2": {
      "type": "string",
      "enum": [
        "USDC",
        "ATOM"
      ]
    },
    "RestrictedVector_for_AssetInfo_and_Uint128": {
      "description": "Vec wrapper for internal use. Some business logic relies on an order of this vector, thus it is forbidden to sort it or remove elements. New values can be added using .update() ONLY.",
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/AssetInfo"
          },
          {
            "$ref": "#/definitions/Uint128"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "VestingAccount": {
      "description": "This structure stores vesting information for a specific address that is getting tokens.",
      "type": "object",
      "required": [
        "address",
        "schedules"
      ],
      "properties": {
        "address": {
          "description": "The address that is getting tokens",
          "type": "string"
        },
        "schedules": {
          "description": "The vesting schedules targeted at the `address`",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VestingSchedule"
          }
        }
      },
      "additionalProperties": false
    },
    "VestingSchedule": {
      "description": "This structure stores parameters for a specific vesting schedule",
      "type": "object",
      "required": [
        "start_point"
      ],
      "properties": {
        "end_point": {
          "description": "The end point for the vesting schedule",
          "anyOf": [
            {
              "$ref": "#/definitions/VestingSchedulePoint"
            },
            {
              "type": "null"
            }
        "incentives_address": {
          "description": "incentives (Staking for dual rewards) contract address",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "required": [
        "lockup_positions_index",
        "ntrn_transferred",
        "total_ntrn_rewards"
      ],
      "properties": {
        "lockup_positions_index": {
          "description": "Number of lockup positions the user is having",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "start_point": {
          "description": "The start date for the vesting schedule",
          "allOf": [
            {
              "$ref": "#/definitions/VestingSchedulePoint"
            }
        "ntrn_transferred": {
          "description": "NTRN tokens transferred to user",
          "type": "boolean"
        },
        "total_ntrn_rewards": {
          "description": "Total NTRN tokens user received as rewards for participation in the lockdrop",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "VestingSchedulePoint": {
      "description": "This structure stores the parameters used to create a vesting schedule.",
      "type": "object",
      "required": [
        "amount",
        "time"
      ],
      "properties": {
        "amount": {
          "description": "The amount of tokens being vested",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "time": {
          "description": "The start time for the vesting schedule",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    }
  }
}
