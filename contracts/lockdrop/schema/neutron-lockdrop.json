{
  "contract_name": "neutron-lockdrop",
  "contract_version": "1.2.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "auction_contract",
      "credits_contract",
      "init_timestamp",
      "lock_window",
      "lockup_rewards_info",
      "max_lock_duration",
      "max_positions_per_user",
      "min_lock_duration",
      "token_info_manager",
      "withdrawal_window"
    ],
    "properties": {
      "auction_contract": {
        "description": "Auction contract address",
        "type": "string"
      },
      "credits_contract": {
        "description": "Credits contract address",
        "type": "string"
      },
      "init_timestamp": {
        "description": "Timestamp when Contract will start accepting LP Token deposits",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "lock_window": {
        "description": "Number of seconds during which lockup deposits will be accepted",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "lockup_rewards_info": {
        "description": "Describes rewards coefficients for each lockup duration",
        "type": "array",
        "items": {
          "$ref": "#/definitions/LockupRewardsInfo"
        }
      },
      "max_lock_duration": {
        "description": "Max. no. of weeks allowed for lockup",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "max_positions_per_user": {
        "description": "Max lockup positions a user can have",
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "min_lock_duration": {
        "description": "Min. no. of weeks allowed for lockup",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "owner": {
        "description": "Account which can update config",
        "type": [
          "string",
          "null"
        ]
      },
      "token_info_manager": {
        "description": "Account which can update token addresses and generator",
        "type": "string"
      },
      "withdrawal_window": {
        "description": "Withdrawal Window Length :: Post the deposit window",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "definitions": {
      "Decimal256": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
        "type": "string"
      },
      "LockupRewardsInfo": {
        "type": "object",
        "required": [
          "coefficient",
          "duration"
        ],
        "properties": {
          "coefficient": {
            "$ref": "#/definitions/Decimal256"
          },
          "duration": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "increase_lockup_for"
        ],
        "properties": {
          "increase_lockup_for": {
            "type": "object",
            "required": [
              "amount",
              "duration",
              "pool_type",
              "user_address"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "duration": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "pool_type": {
                "$ref": "#/definitions/PoolType"
              },
              "user_address": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "increase_ntrn_incentives"
        ],
        "properties": {
          "increase_ntrn_incentives": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "new_config"
            ],
            "properties": {
              "new_config": {
                "$ref": "#/definitions/UpdateConfigMsg"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_token_info"
        ],
        "properties": {
          "set_token_info": {
            "type": "object",
            "required": [
              "atom_token",
              "generator",
              "usdc_token"
            ],
            "properties": {
              "atom_token": {
                "type": "string"
              },
              "generator": {
                "type": "string"
              },
              "usdc_token": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw_from_lockup"
        ],
        "properties": {
          "withdraw_from_lockup": {
            "type": "object",
            "required": [
              "amount",
              "duration",
              "pool_type",
              "user_address"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "duration": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "pool_type": {
                "$ref": "#/definitions/PoolType"
              },
              "user_address": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "claim_rewards_and_optionally_unlock"
        ],
        "properties": {
          "claim_rewards_and_optionally_unlock": {
            "type": "object",
            "required": [
              "duration",
              "pool_type",
              "withdraw_lp_stake"
            ],
            "properties": {
              "duration": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "pool_type": {
                "$ref": "#/definitions/PoolType"
              },
              "withdraw_lp_stake": {
                "type": "boolean"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Callbacks; only callable by the contract itself.",
        "type": "object",
        "required": [
          "callback"
        ],
        "properties": {
          "callback": {
            "$ref": "#/definitions/CallbackMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "ProposeNewOwner creates a proposal to change contract ownership. The validity period for the proposal is set in the `expires_in` variable.",
        "type": "object",
        "required": [
          "propose_new_owner"
        ],
        "properties": {
          "propose_new_owner": {
            "type": "object",
            "required": [
              "expires_in",
              "owner"
            ],
            "properties": {
              "expires_in": {
                "description": "The date after which this proposal expires",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "owner": {
                "description": "Newly proposed contract owner",
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "DropOwnershipProposal removes the existing offer to change contract ownership.",
        "type": "object",
        "required": [
          "drop_ownership_proposal"
        ],
        "properties": {
          "drop_ownership_proposal": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Used to claim contract ownership.",
        "type": "object",
        "required": [
          "claim_ownership"
        ],
        "properties": {
          "claim_ownership": {
            "type": "object"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Asset": {
        "description": "This enum describes a Terra asset (native or CW20).",
        "type": "object",
        "required": [
          "amount",
          "info"
        ],
        "properties": {
          "amount": {
            "description": "A token amount",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "info": {
            "description": "Information about an asset stored in a [`AssetInfo`] struct",
            "allOf": [
              {
                "$ref": "#/definitions/AssetInfo"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AssetInfo": {
        "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
        "oneOf": [
          {
            "description": "Non-native Token",
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Native token",
            "type": "object",
            "required": [
              "native_token"
            ],
            "properties": {
              "native_token": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CallbackMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "update_pool_on_dual_rewards_claim"
            ],
            "properties": {
              "update_pool_on_dual_rewards_claim": {
                "type": "object",
                "required": [
                  "pool_type",
                  "prev_ntrn_balance",
                  "prev_proxy_reward_balances"
                ],
                "properties": {
                  "pool_type": {
                    "$ref": "#/definitions/PoolType"
                  },
                  "prev_ntrn_balance": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "prev_proxy_reward_balances": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Asset"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "withdraw_user_lockup_rewards_callback"
            ],
            "properties": {
              "withdraw_user_lockup_rewards_callback": {
                "type": "object",
                "required": [
                  "duration",
                  "pool_type",
                  "user_address",
                  "withdraw_lp_stake"
                ],
                "properties": {
                  "duration": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "pool_type": {
                    "$ref": "#/definitions/PoolType"
                  },
                  "user_address": {
                    "$ref": "#/definitions/Addr"
                  },
                  "withdraw_lp_stake": {
                    "type": "boolean"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        }
      },
      "PoolType": {
        "type": "string",
        "enum": [
          "USDC",
          "ATOM"
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UpdateConfigMsg": {
        "type": "object",
        "properties": {
          "auction_contract_address": {
            "description": "Bootstrap Auction contract address",
            "type": [
              "string",
              "null"
            ]
          },
          "generator_address": {
            "description": "Generator (Staking for dual rewards) contract address",
            "type": [
              "string",
              "null"
            ]
          }
        }
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pool"
        ],
        "properties": {
          "pool": {
            "type": "object",
            "required": [
              "pool_type"
            ],
            "properties": {
              "pool_type": {
                "$ref": "#/definitions/PoolType"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "user_info"
        ],
        "properties": {
          "user_info": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "user_info_with_lockups_list"
        ],
        "properties": {
          "user_info_with_lockups_list": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "lock_up_info"
        ],
        "properties": {
          "lock_up_info": {
            "type": "object",
            "required": [
              "duration",
              "pool_type",
              "user_address"
            ],
            "properties": {
              "duration": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "pool_type": {
                "$ref": "#/definitions/PoolType"
              },
              "user_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_user_lockup_total_at_height"
        ],
        "properties": {
          "query_user_lockup_total_at_height": {
            "type": "object",
            "required": [
              "height",
              "pool_type",
              "user_address"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "pool_type": {
                "$ref": "#/definitions/PoolType"
              },
              "user_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_lockup_total_at_height"
        ],
        "properties": {
          "query_lockup_total_at_height": {
            "type": "object",
            "required": [
              "height",
              "pool_type"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "pool_type": {
                "$ref": "#/definitions/PoolType"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "PoolType": {
        "type": "string",
        "enum": [
          "USDC",
          "ATOM"
        ]
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object"
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "auction_contract",
        "credits_contract",
        "init_timestamp",
        "lock_window",
        "lockdrop_incentives",
        "lockup_rewards_info",
        "max_lock_duration",
        "max_positions_per_user",
        "min_lock_duration",
        "owner",
        "token_info_manager",
        "withdrawal_window"
      ],
      "properties": {
        "auction_contract": {
          "description": "Bootstrap Auction contract address",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "credits_contract": {
          "description": "Credits contract address",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "generator": {
          "description": "Generator (Staking for dual rewards) contract address",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "init_timestamp": {
          "description": "Timestamp when Contract will start accepting LP Token deposits",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lock_window": {
          "description": "Number of seconds during which lockup positions be accepted",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lockdrop_incentives": {
          "description": "Total NTRN lockdrop incentives to be distributed among the users",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "lockup_rewards_info": {
          "description": "Describes rewards coefficients for each lockup duration",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockupRewardsInfo"
          }
        },
        "max_lock_duration": {
          "description": "Max. no. of weeks allowed for lockup",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_positions_per_user": {
          "description": "Max lockup positions a user can have",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "min_lock_duration": {
          "description": "Min. no. of weeks allowed for lockup",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "owner": {
          "description": "Account which can update the config",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "token_info_manager": {
          "description": "Account which can update the generator and token addresses",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "withdrawal_window": {
          "description": "Withdrawal Window Length :: Post the deposit window",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal256": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
          "type": "string"
        },
        "LockupRewardsInfo": {
          "type": "object",
          "required": [
            "coefficient",
            "duration"
          ],
          "properties": {
            "coefficient": {
              "$ref": "#/definitions/Decimal256"
            },
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "lock_up_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LockUpInfoResponse",
      "type": "object",
      "required": [
        "astroport_lp_token",
        "claimable_generator_astro_debt",
        "claimable_generator_proxy_debt",
        "duration",
        "generator_ntrn_debt",
        "generator_proxy_debt",
        "lp_units_locked",
        "ntrn_rewards",
        "pool_type",
        "unlock_timestamp",
        "withdrawal_flag"
      ],
      "properties": {
        "astroport_lp_token": {
          "$ref": "#/definitions/Addr"
        },
        "astroport_lp_transferred": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "astroport_lp_units": {
          "description": "User's Astroport LP units, calculated as lp_units_locked (terraswap) / total LP units locked (terraswap) * Astroport LP units minted post migration",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "claimable_generator_astro_debt": {
          "description": "ASTRO tokens receivable as generator rewards that user can claim",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "claimable_generator_proxy_debt": {
          "description": "Proxy tokens receivable as generator rewards that user can claim",
          "allOf": [
            {
              "$ref": "#/definitions/RestrictedVector_for_AssetInfo_and_Uint128"
            }
          ]
        },
        "duration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "generator_ntrn_debt": {
          "description": "Generator NTRN tokens lockup received as generator rewards",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "generator_proxy_debt": {
          "description": "Generator Proxy tokens lockup received as generator rewards",
          "allOf": [
            {
              "$ref": "#/definitions/RestrictedVector_for_AssetInfo_and_Uint128"
            }
          ]
        },
        "lp_units_locked": {
          "description": "Terraswap LP units locked by the user",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "ntrn_rewards": {
          "description": "NTRN tokens received as rewards for participation in the lockdrop",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "pool_type": {
          "description": "Terraswap LP token",
          "allOf": [
            {
              "$ref": "#/definitions/PoolType"
            }
          ]
        },
        "unlock_timestamp": {
          "description": "Timestamp beyond which this position can be unlocked",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "withdrawal_flag": {
          "description": "Boolean value indicating if the user's has withdrawn funds post the only 1 withdrawal limit cutoff",
          "type": "boolean"
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetInfo": {
          "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
          "oneOf": [
            {
              "description": "Non-native Token",
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native token",
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PoolType": {
          "type": "string",
          "enum": [
            "USDC",
            "ATOM"
          ]
        },
        "RestrictedVector_for_AssetInfo_and_Uint128": {
          "description": "Vec wrapper for internal use. Some business logic relies on an order of this vector, thus it is forbidden to sort it or remove elements. New values can be added using .update() ONLY.",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/AssetInfo"
              },
              {
                "$ref": "#/definitions/Uint128"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "pool": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PoolInfo",
      "type": "object",
      "required": [
        "amount_in_lockups",
        "generator_ntrn_per_share",
        "generator_proxy_per_share",
        "incentives_share",
        "is_staked",
        "lp_token",
        "weighted_amount"
      ],
      "properties": {
        "amount_in_lockups": {
          "$ref": "#/definitions/Uint128"
        },
        "generator_ntrn_per_share": {
          "description": "Ratio of Generator NTRN rewards accured to astroport pool share",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "generator_proxy_per_share": {
          "description": "Ratio of Generator Proxy rewards accured to astroport pool share",
          "allOf": [
            {
              "$ref": "#/definitions/RestrictedVector_for_AssetInfo_and_Decimal"
            }
          ]
        },
        "incentives_share": {
          "description": "Share of total NTRN incentives allocated to this pool",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "is_staked": {
          "description": "Boolean value indicating if the LP Tokens are staked with the Generator contract or not",
          "type": "boolean"
        },
        "lp_token": {
          "$ref": "#/definitions/Addr"
        },
        "weighted_amount": {
          "description": "Weighted LP Token balance used to calculate NTRN rewards a particular user can claim",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetInfo": {
          "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
          "oneOf": [
            {
              "description": "Non-native Token",
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native token",
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "RestrictedVector_for_AssetInfo_and_Decimal": {
          "description": "Vec wrapper for internal use. Some business logic relies on an order of this vector, thus it is forbidden to sort it or remove elements. New values can be added using .update() ONLY.",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/AssetInfo"
              },
              {
                "$ref": "#/definitions/Decimal"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "query_lockup_total_at_height": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_Uint128",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "query_user_lockup_total_at_height": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_Uint128",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StateResponse",
      "type": "object",
      "required": [
        "supported_pairs_list",
        "total_incentives_share"
      ],
      "properties": {
        "supported_pairs_list": {
          "description": "Vector containing LP addresses for all the supported LP Pools",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PoolType"
          }
        },
        "total_incentives_share": {
          "description": "Total NTRN incentives share",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "definitions": {
        "PoolType": {
          "type": "string",
          "enum": [
            "USDC",
            "ATOM"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "user_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserInfoResponse",
      "type": "object",
      "required": [
        "claimable_generator_ntrn_debt",
        "lockup_infos",
        "lockup_positions_index",
        "ntrn_transferred",
        "total_ntrn_rewards"
      ],
      "properties": {
        "claimable_generator_ntrn_debt": {
          "description": "NTRN tokens receivable as generator rewards that user can claim",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "lockup_infos": {
          "description": "Lockup positions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockUpInfoResponse"
          }
        },
        "lockup_positions_index": {
          "description": "Number of lockup positions the user is having",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "ntrn_transferred": {
          "description": "NTRN tokens transferred to user",
          "type": "boolean"
        },
        "total_ntrn_rewards": {
          "description": "Total NTRN tokens user received as rewards for participation in the lockdrop",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetInfo": {
          "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
          "oneOf": [
            {
              "description": "Non-native Token",
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native token",
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "LockUpInfoResponse": {
          "type": "object",
          "required": [
            "astroport_lp_token",
            "claimable_generator_astro_debt",
            "claimable_generator_proxy_debt",
            "duration",
            "generator_ntrn_debt",
            "generator_proxy_debt",
            "lp_units_locked",
            "ntrn_rewards",
            "pool_type",
            "unlock_timestamp",
            "withdrawal_flag"
          ],
          "properties": {
            "astroport_lp_token": {
              "$ref": "#/definitions/Addr"
            },
            "astroport_lp_transferred": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "astroport_lp_units": {
              "description": "User's Astroport LP units, calculated as lp_units_locked (terraswap) / total LP units locked (terraswap) * Astroport LP units minted post migration",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "claimable_generator_astro_debt": {
              "description": "ASTRO tokens receivable as generator rewards that user can claim",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "claimable_generator_proxy_debt": {
              "description": "Proxy tokens receivable as generator rewards that user can claim",
              "allOf": [
                {
                  "$ref": "#/definitions/RestrictedVector_for_AssetInfo_and_Uint128"
                }
              ]
            },
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "generator_ntrn_debt": {
              "description": "Generator NTRN tokens lockup received as generator rewards",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "generator_proxy_debt": {
              "description": "Generator Proxy tokens lockup received as generator rewards",
              "allOf": [
                {
                  "$ref": "#/definitions/RestrictedVector_for_AssetInfo_and_Uint128"
                }
              ]
            },
            "lp_units_locked": {
              "description": "Terraswap LP units locked by the user",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "ntrn_rewards": {
              "description": "NTRN tokens received as rewards for participation in the lockdrop",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "pool_type": {
              "description": "Terraswap LP token",
              "allOf": [
                {
                  "$ref": "#/definitions/PoolType"
                }
              ]
            },
            "unlock_timestamp": {
              "description": "Timestamp beyond which this position can be unlocked",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "withdrawal_flag": {
              "description": "Boolean value indicating if the user's has withdrawn funds post the only 1 withdrawal limit cutoff",
              "type": "boolean"
            }
          }
        },
        "PoolType": {
          "type": "string",
          "enum": [
            "USDC",
            "ATOM"
          ]
        },
        "RestrictedVector_for_AssetInfo_and_Uint128": {
          "description": "Vec wrapper for internal use. Some business logic relies on an order of this vector, thus it is forbidden to sort it or remove elements. New values can be added using .update() ONLY.",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/AssetInfo"
              },
              {
                "$ref": "#/definitions/Uint128"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "user_info_with_lockups_list": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserInfoWithListResponse",
      "type": "object",
      "required": [
        "lockup_infos",
        "lockup_positions_index",
        "ntrn_transferred",
        "total_ntrn_rewards"
      ],
      "properties": {
        "lockup_infos": {
          "description": "Lockup positions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockUpInfoSummary"
          }
        },
        "lockup_positions_index": {
          "description": "Number of lockup positions the user is having",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "ntrn_transferred": {
          "description": "NTRN tokens transferred to user",
          "type": "boolean"
        },
        "total_ntrn_rewards": {
          "description": "Total NTRN tokens user received as rewards for participation in the lockdrop",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "definitions": {
        "LockUpInfoSummary": {
          "type": "object",
          "required": [
            "duration",
            "pool_type"
          ],
          "properties": {
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "pool_type": {
              "$ref": "#/definitions/PoolType"
            }
          }
        },
        "PoolType": {
          "type": "string",
          "enum": [
            "USDC",
            "ATOM"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
