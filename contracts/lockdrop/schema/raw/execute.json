{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "increase_lockup_for"
      ],
      "properties": {
        "increase_lockup_for": {
          "type": "object",
          "required": [
            "amount",
            "duration",
            "pool_type",
            "user_address"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "pool_type": {
              "$ref": "#/definitions/PoolType"
            },
            "user_address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "increase_ntrn_incentives"
      ],
      "properties": {
        "increase_ntrn_incentives": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "new_config"
          ],
          "properties": {
            "new_config": {
              "$ref": "#/definitions/UpdateConfigMsg"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_token_info"
      ],
      "properties": {
        "set_token_info": {
          "type": "object",
          "required": [
            "atom_token",
            "generator",
            "usdc_token"
          ],
          "properties": {
            "atom_token": {
              "type": "string"
            },
            "generator": {
              "type": "string"
            },
            "usdc_token": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw_from_lockup"
      ],
      "properties": {
        "withdraw_from_lockup": {
          "type": "object",
          "required": [
            "amount",
            "duration",
            "pool_type",
            "user_address"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "pool_type": {
              "$ref": "#/definitions/PoolType"
            },
            "user_address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_rewards_and_optionally_unlock"
      ],
      "properties": {
        "claim_rewards_and_optionally_unlock": {
          "type": "object",
          "required": [
            "duration",
            "pool_type",
            "withdraw_lp_stake"
          ],
          "properties": {
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "pool_type": {
              "$ref": "#/definitions/PoolType"
            },
            "withdraw_lp_stake": {
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Callbacks; only callable by the contract itself.",
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/CallbackMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProposeNewOwner creates a proposal to change contract ownership. The validity period for the proposal is set in the `expires_in` variable.",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "owner"
          ],
          "properties": {
            "expires_in": {
              "description": "The date after which this proposal expires",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "description": "Newly proposed contract owner",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "DropOwnershipProposal removes the existing offer to change contract ownership.",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Used to claim contract ownership.",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Migrates user's locked liquidity from XYK pools to PCL ones, transferring lockdrop participation rewards to the address which liquidity has been migrated.",
      "type": "object",
      "required": [
        "migrate_liquidity_to_pcl_pools"
      ],
      "properties": {
        "migrate_liquidity_to_pcl_pools": {
          "type": "object",
          "properties": {
            "user_address_raw": {
              "description": "The address which liquidity is supposed to be transferred. If no user address is provided, the message sender's address is used.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "description": "This enum describes a Terra asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "CallbackMsg": {
      "oneOf": [
        {
          "description": "Updates contract state after dual staking rewards are claimed from the generator contract.",
          "type": "object",
          "required": [
            "update_pool_on_dual_rewards_claim"
          ],
          "properties": {
            "update_pool_on_dual_rewards_claim": {
              "type": "object",
              "required": [
                "pool_type",
                "prev_ntrn_balance",
                "prev_proxy_reward_balances"
              ],
              "properties": {
                "pool_type": {
                  "$ref": "#/definitions/PoolType"
                },
                "prev_ntrn_balance": {
                  "$ref": "#/definitions/Uint128"
                },
                "prev_proxy_reward_balances": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Asset"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Withdraws user rewards and LP Tokens after claims / unlocks.",
          "type": "object",
          "required": [
            "withdraw_user_lockup_rewards_callback"
          ],
          "properties": {
            "withdraw_user_lockup_rewards_callback": {
              "type": "object",
              "required": [
                "duration",
                "pool_type",
                "user_address",
                "withdraw_lp_stake"
              ],
              "properties": {
                "duration": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "pool_type": {
                  "$ref": "#/definitions/PoolType"
                },
                "user_address": {
                  "$ref": "#/definitions/Addr"
                },
                "withdraw_lp_stake": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Entry point for a single lockup position migration to PCL lockdrop contract. Performs generator rewards claiming and initializes liquidity withdrawal+transfer process by invocation of the respective callback message.",
          "type": "object",
          "required": [
            "init_migrate_lockup_to_pcl_pools_callback"
          ],
          "properties": {
            "init_migrate_lockup_to_pcl_pools_callback": {
              "type": "object",
              "required": [
                "duration",
                "pool_type",
                "user_address"
              ],
              "properties": {
                "duration": {
                  "description": "The duration of the lock period.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "pool_type": {
                  "description": "The type of the pool the lockup is related to.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolType"
                    }
                  ]
                },
                "user_address": {
                  "description": "The address of the user which owns the lockup.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The second step in the lockup's XYK -> PCL liquidity migration process. Claims all possible rewards that the user is eligible of and transfers them to the user.",
          "type": "object",
          "required": [
            "transfer_all_rewards_before_migration_callback"
          ],
          "properties": {
            "transfer_all_rewards_before_migration_callback": {
              "type": "object",
              "required": [
                "duration",
                "pool_type",
                "user_address"
              ],
              "properties": {
                "duration": {
                  "description": "The duration of the lock period.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "pool_type": {
                  "description": "The type of the pool the lockup is related to.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolType"
                    }
                  ]
                },
                "user_address": {
                  "description": "The address of the user which owns the lockup.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The third step in the lockup's XYK -> PCL liquidity migration process. Handles withdrawal of staked liquidity from the generator contract and liquidity transfer to the PCL lockdrop contract.",
          "type": "object",
          "required": [
            "withdraw_user_lockup_callback"
          ],
          "properties": {
            "withdraw_user_lockup_callback": {
              "type": "object",
              "required": [
                "astroport_lp_amount",
                "astroport_lp_token",
                "duration",
                "generator",
                "pool_type",
                "user_address"
              ],
              "properties": {
                "astroport_lp_amount": {
                  "description": "The amount of LP token to be unstaked and withdrawn.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                },
                "astroport_lp_token": {
                  "description": "The address of the pool's liquidity token.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "duration": {
                  "description": "The duration of the lock period.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "generator": {
                  "description": "The address of the generator which possesses the staked liquidity.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "pool_type": {
                  "description": "The type of the pool the lockup is related to.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolType"
                    }
                  ]
                },
                "user_address": {
                  "description": "The address of the user which owns the lockup.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The fourth step in the lockup's XYK -> PCL liquidity migration process. Invokes the PCL lockdrop contract's MigrateXYKLiquidity handler which creates an LP position in the PCL pool and a lockup in the PCL lockdrop contract in accordance with the withdrawn user's lockup position.",
          "type": "object",
          "required": [
            "migrate_user_lockup_to_pcl_pair_callback"
          ],
          "properties": {
            "migrate_user_lockup_to_pcl_pair_callback": {
              "type": "object",
              "required": [
                "duration",
                "ntrn_balance",
                "paired_asset_balance",
                "paired_asset_denom",
                "pool_type",
                "user_address"
              ],
              "properties": {
                "duration": {
                  "description": "The duration of the lock period.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "ntrn_balance": {
                  "description": "The balance in untrn of the XYK lockdrop contract at the third migration step. Is used in the callback to calculate the amount of untrn been withdrawn from the XYK pool.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                },
                "paired_asset_balance": {
                  "description": "The balance in the paired denom of the XYK lockdrop contract at the third migration step. Is used in the callback to calculate the amount of the paired asset been withdrawn from the XYK pool.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                },
                "paired_asset_denom": {
                  "description": "The denom of the paired asset (the asset paired with untrn in the pool).",
                  "type": "string"
                },
                "pool_type": {
                  "description": "The type of the pool the lockup is related to.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolType"
                    }
                  ]
                },
                "user_address": {
                  "description": "The address of the user which owns the lockup.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "PoolType": {
      "type": "string",
      "enum": [
        "USDC",
        "ATOM"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UpdateConfigMsg": {
      "type": "object",
      "properties": {
        "auction_contract_address": {
          "description": "Bootstrap Auction contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "generator_address": {
          "description": "Generator (Staking for dual rewards) contract address",
          "type": [
            "string",
            "null"
          ]
        }
      }
    }
  }
}
