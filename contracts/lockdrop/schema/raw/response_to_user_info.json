{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "UserInfoResponse",
  "type": "object",
  "required": [
    "claimable_generator_ntrn_debt",
    "lockup_infos",
    "lockup_positions_index",
    "ntrn_transferred",
    "total_ntrn_rewards"
  ],
  "properties": {
    "claimable_generator_ntrn_debt": {
      "description": "NTRN tokens receivable as generator rewards that user can claim",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "lockup_infos": {
      "description": "Lockup positions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/LockUpInfoResponse"
      }
    },
    "lockup_positions_index": {
      "description": "Number of lockup positions the user is having",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "ntrn_transferred": {
      "description": "NTRN tokens transferred to user",
      "type": "boolean"
    },
    "total_ntrn_rewards": {
      "description": "Total NTRN tokens user received as rewards for participation in the lockdrop",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LockUpInfoResponse": {
      "type": "object",
      "required": [
        "astroport_lp_token",
        "claimable_generator_astro_debt",
        "claimable_generator_proxy_debt",
        "duration",
        "generator_ntrn_debt",
        "generator_proxy_debt",
        "lp_units_locked",
        "ntrn_rewards",
        "pool_type",
        "unlock_timestamp",
        "withdrawal_flag"
      ],
      "properties": {
        "astroport_lp_token": {
          "$ref": "#/definitions/Addr"
        },
        "astroport_lp_transferred": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "astroport_lp_units": {
          "description": "User's Astroport LP units, calculated as lp_units_locked (terraswap) / total LP units locked (terraswap) * Astroport LP units minted post migration",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "claimable_generator_astro_debt": {
          "description": "ASTRO tokens receivable as generator rewards that user can claim",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "claimable_generator_proxy_debt": {
          "description": "Proxy tokens receivable as generator rewards that user can claim",
          "allOf": [
            {
              "$ref": "#/definitions/RestrictedVector_for_AssetInfo_and_Uint128"
            }
          ]
        },
        "duration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "generator_ntrn_debt": {
          "description": "Generator NTRN tokens lockup received as generator rewards",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "generator_proxy_debt": {
          "description": "Generator Proxy tokens lockup received as generator rewards",
          "allOf": [
            {
              "$ref": "#/definitions/RestrictedVector_for_AssetInfo_and_Uint128"
            }
          ]
        },
        "lp_units_locked": {
          "description": "Terraswap LP units locked by the user",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "ntrn_rewards": {
          "description": "NTRN tokens received as rewards for participation in the lockdrop",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "pool_type": {
          "description": "Terraswap LP token",
          "allOf": [
            {
              "$ref": "#/definitions/PoolType"
            }
          ]
        },
        "unlock_timestamp": {
          "description": "Timestamp beyond which this position can be unlocked",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "withdrawal_flag": {
          "description": "Boolean value indicating if the user's has withdrawn funds post the only 1 withdrawal limit cutoff",
          "type": "boolean"
        }
      }
    },
    "PoolType": {
      "type": "string",
      "enum": [
        "USDC",
        "ATOM"
      ]
    },
    "RestrictedVector_for_AssetInfo_and_Uint128": {
      "description": "Vec wrapper for internal use. Some business logic relies on an order of this vector, thus it is forbidden to sort it or remove elements. New values can be added using .update() ONLY.",
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/AssetInfo"
          },
          {
            "$ref": "#/definitions/Uint128"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
