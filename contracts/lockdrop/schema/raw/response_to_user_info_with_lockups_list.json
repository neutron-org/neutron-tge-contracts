{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "UserInfoWithListResponse",
  "type": "object",
  "required": [
    "lockup_infos",
    "lockup_positions_index",
    "ntrn_transferred",
    "total_ntrn_rewards"
  ],
  "properties": {
    "lockup_infos": {
      "description": "Lockup positions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/LockUpInfoSummary"
      }
    },
    "lockup_positions_index": {
      "description": "Number of lockup positions the user is having",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "ntrn_transferred": {
      "description": "NTRN tokens transferred to user",
      "type": "boolean"
    },
    "total_ntrn_rewards": {
      "description": "Total NTRN tokens user received as rewards for participation in the lockdrop",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    }
  },
  "definitions": {
    "LockUpInfoSummary": {
      "type": "object",
      "required": [
        "duration",
        "pool_type"
      ],
      "properties": {
        "duration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "pool_type": {
          "$ref": "#/definitions/PoolType"
        }
      }
    },
    "PoolType": {
      "type": "string",
      "enum": [
        "USDC",
        "ATOM"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
