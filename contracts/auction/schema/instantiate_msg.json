{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "denom_manager",
    "deposit_window",
    "init_timestamp",
    "lp_tokens_lock_window",
    "max_exchange_rate_age",
    "min_ntrn_amount",
    "price_feed_contract",
    "reserve_contract_address",
    "vesting_atom_contract_address",
    "vesting_lp_duration",
    "vesting_migration_pack_size",
    "vesting_usdc_contract_address",
    "withdrawal_window"
  ],
  "properties": {
    "denom_manager": {
      "type": "string"
    },
    "deposit_window": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "init_timestamp": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "lockdrop_contract_address": {
      "type": [
        "string",
        "null"
      ]
    },
    "lp_tokens_lock_window": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "max_exchange_rate_age": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "min_ntrn_amount": {
      "$ref": "#/definitions/Uint128"
    },
    "owner": {
      "type": [
        "string",
        "null"
      ]
    },
    "price_feed_contract": {
      "type": "string"
    },
    "reserve_contract_address": {
      "type": "string"
    },
    "vesting_atom_contract_address": {
      "type": "string"
    },
    "vesting_lp_duration": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "vesting_migration_pack_size": {
      "type": "integer",
      "format": "uint16",
      "minimum": 0.0
    },
    "vesting_usdc_contract_address": {
      "type": "string"
    },
    "withdrawal_window": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
