{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "atom_incentives_share",
    "atom_token",
    "atom_weighted_amount",
    "auction_contract",
    "credits_contract",
    "generator",
    "lockdrop_incentives",
    "lockup_rewards_info",
    "usdc_incentives_share",
    "usdc_token",
    "usdc_weighted_amount",
    "xyk_lockdrop_contract"
  ],
  "properties": {
    "atom_incentives_share": {
      "description": "Share of total NTRN incentives allocated to the NTRN/ATOM PCL pool",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "atom_token": {
      "description": "Address of the LP token of the NTRN/ATOM PCL pool",
      "type": "string"
    },
    "atom_weighted_amount": {
      "description": "Weighted LP Token balance used to calculate NTRN rewards a particular NTRN/ATOM pool depositor can claim",
      "allOf": [
        {
          "$ref": "#/definitions/Uint256"
        }
      ]
    },
    "auction_contract": {
      "description": "Auction contract address",
      "type": "string"
    },
    "credits_contract": {
      "description": "Credits contract address",
      "type": "string"
    },
    "generator": {
      "description": "Generator (Staking for dual rewards) contract address",
      "type": "string"
    },
    "lockdrop_incentives": {
      "description": "Total NTRN lockdrop incentives distributed among the users.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "lockup_rewards_info": {
      "description": "Describes rewards coefficients for each lockup duration",
      "type": "array",
      "items": {
        "$ref": "#/definitions/LockupRewardsInfo"
      }
    },
    "owner": {
      "description": "Account which can update config",
      "type": [
        "string",
        "null"
      ]
    },
    "usdc_incentives_share": {
      "description": "Share of total NTRN incentives allocated to the NTRN/USDC PCL pool",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "usdc_token": {
      "description": "Address of the LP token of the NTRN/USDC PCL pool",
      "type": "string"
    },
    "usdc_weighted_amount": {
      "description": "Weighted LP Token balance used to calculate NTRN rewards a particular NTRN/USDC pool depositor can claim",
      "allOf": [
        {
          "$ref": "#/definitions/Uint256"
        }
      ]
    },
    "xyk_lockdrop_contract": {
      "description": "Original XYK lockdrop contract address",
      "type": "string"
    }
  },
  "definitions": {
    "Decimal256": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
      "type": "string"
    },
    "LockupRewardsInfo": {
      "type": "object",
      "required": [
        "coefficient",
        "duration"
      ],
      "properties": {
        "coefficient": {
          "$ref": "#/definitions/Decimal256"
        },
        "duration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
